export declare class ytb_xs {
    private apiKey:string;
    constructor(YoutubeAPIConfig:{ apiKey:string });
    GET:{
        channelByUsername: (username:string) => Promise<{
            ok:boolean,
            status:number,
            statusText:string,
            data?:{
            kind:string,
            etag:string,
            id:string,
            snippet:{
            title:string,
            description:string,
            customUrl:string,
            publishedAt:string,
            thumbnails:{
            default:{
            url:string,
            width:number,
            height:number
            },
            medium?:{
            url:string,
            width:number,
            height:number
            },
            high?:{
            url:string,
            width:number,
            height:number
            },
            standard?:{
            url:string,
            width:number,
            height:number
            },
            maxres?:{
            url:string,
            width:number,
            height:number
            }
            },
            localized:{
            title:string,
            description:string
            },
            country:string,
            contentDetails:{
            likes:string,
            uploads:string
            },
            statistics:{
            viewCount:string,
            subscriberCount:string,
            hiddenSubscriberCount:boolean,
            videoCount:string
            }
            }
            }
        }>;
        channelById: (id:string) => Promise<{
            ok:boolean,
            status:number,
            statusText:string,
            data?:{
            kind:string,
            etag:string,
            id:string,
            snippet:{
            title:string,
            description:string,
            customUrl:string,
            publishedAt:string,
            thumbnails:{
            default:{
            url:string,
            width:number,
            height:number
            },
            medium?:{
            url:string,
            width:number,
            height:number
            },
            high?:{
            url:string,
            width:number,
            height:number
            },
            standard?:{
            url:string,
            width:number,
            height:number
            },
            maxres?:{
            url:string,
            width:number,
            height:number
            }
            },
            localized:{
            title:string,
            description:string
            },
            country:string,
            contentDetails:{
            likes:string,
            uploads:string
            },
            statistics:{
            viewCount:string,
            subscriberCount:string,
            hiddenSubscriberCount:boolean,
            videoCount:string
            }
            }
            }
        }>;
        lastVideoByUsername: (username:string) => Promise<{
            ok:boolean,
            status:number,
            statusText:string,
            data?:{
            publishedAt:string,
            channelId:string,
            title:string,
            description:string,
            thumbnails:{
            default:{
            url:string,
            width:number,
            height:number
            },
            medium?:{
            url:string,
            width:number,
            height:number
            },
            high?:{
            url:string,
            width:number,
            height:number
            },
            standard?:{
            url:string,
            width:number,
            height:number
            },
            maxres?:{
            url:string,
            width:number,
            height:number
            }
            },
            channelTitle:string,
            playlistId:string,
            position:number,
            resourceId:{
            kind:string,
            videoId:string
            },
            videoOwnerChannelTitle:string,
            videoOwnerChannelId:string
            }
        }>;
        lastVideoById: (id:string) => Promise<{
            ok:boolean,
            status:number,
            statusText:string,
            data?:{
            publishedAt:string,
            channelId:string,
            title:string,
            description:string,
            thumbnails:{
            default:{
            url:string,
            width:number,
            height:number
            },
            medium?:{
            url:string,
            width:number,
            height:number
            },
            high?:{
            url:string,
            width:number,
            height:number
            },
            standard?:{
            url:string,
            width:number,
            height:number
            },
            maxres?:{
            url:string,
            width:number,
            height:number
            }
            },
            channelTitle:string,
            playlistId:string,
            position:number,
            resourceId:{
            kind:string,
            videoId:string
            },
            videoOwnerChannelTitle:string,
            videoOwnerChannelId:string
            }
        }>;
    }
}